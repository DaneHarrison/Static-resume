[{"categories":null,"contents":"A digital menu with comparing features focused on experimental design.\n","permalink":"/projects/creations/digimenu/","tags":["UX design","React","Javascript","CSS","Photoshop"],"title":"Digi-Menu"},{"categories":null,"contents":"Collaborative class project (A+) with short iterations and testing that nearly triples production code.\n","permalink":"/projects/creations/eaten/","tags":["Java","Android","Android studio","HSQL","SQL","Data grip","Agile development","UX design","Mockito","JUNIT5"],"title":"EaTen"},{"categories":null,"contents":"Large scale automated price comparison web service that deals with the Travelling Salesman Problem.\n","permalink":"/projects/creations/grocerybot/","tags":["JavaScript","Node","Express","REST","Dynamic programming","Algorithm analysis","YELP API","OpenStreetMap API","Vue","CSS","SASS","UX design","Scrappy","Postgres","SQL","Prisma","Database normalization"],"title":"GroceryBot"},{"categories":null,"contents":"An authentication system that identifies existing users faces using the eigenface algorithm.\n","permalink":"/projects/creations/mob/","tags":["Eigenfaces","OpenCV","Docker","Kubernetes","Map Reduce","PLpgSQL","SQL","Flask","REST","Javascript","React","Bash"],"title":"M.O.B"},{"categories":null,"contents":"Wearable display shirt that lights up according to audio frequency that focuses on best practices, swift development and testing cycles\n","permalink":"/projects/creations/projecty/","tags":["C++","CMake","Design patterns","Catch2","Agile and Test-driven development","Blender","Subpixel graphics","Product design","Arduino","3D printing","OnShape","Cura"],"title":"Project Y"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml\n[outputs] home = [\u0026quot;HTML\u0026quot;, \u0026quot;JSON\u0026quot;] Searching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category\n... \u0026quot;contents\u0026quot;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026quot;tags\u0026quot;:{{ .Params.tags | jsonify }}{{end}}, \u0026quot;categories\u0026quot; : {{ .Params.categories | jsonify }}, ... Edit fuse.js options to Search static/js/search.js\nkeys: [ \u0026quot;title\u0026quot;, \u0026quot;contents\u0026quot;, \u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot; ] ","permalink":"/search/","tags":null,"title":"Search Results"}]